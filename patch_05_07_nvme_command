diff --git kernel/x86_64/block/blk-core.c kernel/x86_64/block/blk-core.c
index 3ca326a..217c658 100755
--- kernel/x86_64/block/blk-core.c
+++ kernel/x86_64/block/blk-core.c
@@ -2012,6 +2012,9 @@ void submit_bio(long long/*int*/ rw, struct bio *bio)
 		 * Original is in blk_queue_bio() for scsi
 		 */
 		if (bio->bi_rw & REQ_ORDERED) {
+			printk(KERN_ERR "main sid:%d\t eid:%d\t sub sid:%d\t eid:%d\n", bio->main_stream_id, bio->main_eid, bio->sub_stream_id, bio->sub_eid);
+
+
 			struct request_queue *q = bdev_get_queue(bio->bi_bdev);
 			if (!current->__epoch)
 				blk_start_epoch(q);
@@ -2019,16 +2022,10 @@ void submit_bio(long long/*int*/ rw, struct bio *bio)
 			get_epoch(current->__epoch);
 			bio->bi_epoch = current->__epoch;
 			bio->bi_epoch->pending++;
-			mutex_lock(&q->epoch_id_lock);
-			g_epoch_id = bio->bi_epoch->eid;
-			mutex_unlock(&q->epoch_id_lock);
-
+			
 			if (bio->bi_rw & REQ_BARRIER) {
 				blk_finish_epoch();
-
-				mutex_lock(&q->epoch_id_lock);
-				q->epoch_complete = true;
-				mutex_unlock(&q->epoch_id_lock);
+				current->epoch_count++;
 			}
 		}
 		/* end */
@@ -2071,6 +2068,8 @@ void submit_bio64(long long rw, struct bio *bio)
 
 		/* kms91 added */
 		if (bio->bi_rw & REQ_ORDERED) {
+		printk(KERN_ERR "main sid:%d\t eid:%d\t sub sid:%d\t eid:%d\n", bio->main_stream_id, bio->main_eid, bio->sub_stream_id, bio->sub_eid);
+
 			struct request_queue *q = bdev_get_queue(bio->bi_bdev);
 			if (!current->__epoch)
 				blk_start_epoch(q);
@@ -2078,16 +2077,10 @@ void submit_bio64(long long rw, struct bio *bio)
 			get_epoch(current->__epoch);
 			bio->bi_epoch = current->__epoch;
 			bio->bi_epoch->pending++;
-			mutex_lock(&q->epoch_id_lock);
-			g_epoch_id = bio->bi_epoch->eid;
-			mutex_unlock(&q->epoch_id_lock);
-
+			
 			if (bio->bi_rw & REQ_BARRIER) {
 				blk_finish_epoch();
-
-				mutex_lock(&q->epoch_id_lock);
-				q->epoch_complete = true;
-				mutex_unlock(&q->epoch_id_lock);
+				current->epoch_count++;
 			}
 		}
 	}
diff --git kernel/x86_64/drivers/block/nvme-core.c kernel/x86_64/drivers/block/nvme-core.c
index b5760d7..0f5238d 100755
--- kernel/x86_64/drivers/block/nvme-core.c
+++ kernel/x86_64/drivers/block/nvme-core.c
@@ -726,12 +726,20 @@ static int nvme_submit_bio_queue(struct nvme_queue *nvmeq, struct nvme_ns *ns,
 	 * So it is inserted directly without typecasting.
 	 */
 	if(bio->bi_epoch) {
-		cmnd->rw.cmd_stream_id = bio->bi_stream_id;
-		cmnd->rw.cmd_epoch_id = bio->bi_epoch->eid;
+		//cmnd->rw.cmd_stream_id = bio->bi_stream_id;
+		//cmnd->rw.cmd_epoch_id = bio->bi_epoch->eid;
+		cmnd->rw.sid_1 = bio->main_stream_id;
+		cmnd->rw.sid_2 = bio->sub_stream_id;
+		cmnd->rw.eid_1 = bio->main_eid;
+		cmnd->rw.eid_2 = bio->sub_eid;
 	}
 	else {
-		cmnd->rw.cmd_stream_id = 0;
-		cmnd->rw.cmd_epoch_id = 0;
+		//cmnd->rw.cmd_stream_id = 0;
+		//cmnd->rw.cmd_epoch_id = 0;
+		cmnd->rw.sid_1 = 0;
+		cmnd->rw.sid_2 = 0;
+		cmnd->rw.eid_1 = 0;
+		cmnd->rw.eid_2 = 0;
 	}
 
 	if (++nvmeq->sq_tail == nvmeq->q_depth)
diff --git kernel/x86_64/fs/buffer.c kernel/x86_64/fs/buffer.c
index 4c0c048..b52a414 100755
--- kernel/x86_64/fs/buffer.c
+++ kernel/x86_64/fs/buffer.c
@@ -3116,13 +3116,11 @@ int _submit_bh64(long long rw, struct buffer_head *bh, unsigned long long bio_fl
 	bio->bi_end_io = end_bio_bh_io_sync;
 	bio->bi_private = bh;
 
-	/*
-	 * kms91 added 19.04.05
-	 * Initialize bi_stream_id. bi_stream_id store current process id.
-	 * Type of bi_stream_id is pid_t,
-	 * so it is not necessary to type casting.
-	 */
 	bio->bi_stream_id = current->pid;
+	bio->main_stream_id = current->pid;
+	bio->sub_stream_id = 0;
+	bio->main_eid = current->epoch_count;
+	bio->sub_eid = 0;
 
 	/* Take care of bh's that straddle the end of the device */
 	guard_bh_eod(rw, bio, bh);
diff --git kernel/x86_64/fs/ext4/page-io.c kernel/x86_64/fs/ext4/page-io.c
index 112cc5d..2a25047 100755
--- kernel/x86_64/fs/ext4/page-io.c
+++ kernel/x86_64/fs/ext4/page-io.c
@@ -327,16 +327,29 @@ static int io_submit_init(struct ext4_io_submit *io,
 	bio->bi_bdev = bh->b_bdev;
 	bio->bi_private = io->io_end = io_end;
 	bio->bi_end_io = ext4_end_bio;
+	bio->main_stream_id = current->pid;
+	bio->sub_eid = 0;
+	bio->sub_stream_id = 0;
 
-	/* 
-	 * kms91 added 19.04.05
-	 * Initialize bi_stream_id. bi_stream_id store current process id.
-	 * Type of bi_stream_id is pid_t, 
-	 * so it is not necessary to type casting.
-	 */
 	bio->bi_stream_id = current->pid;
+	handle_t *handle =  ext4_journal_current_handle();
+	if(wbc->sync_mode == WB_ORDERED_ALL){
+		bio->main_eid = current->epoch_count;
+		if(handle!=NULL){
+			bio->sub_stream_id = handle->h_transaction->t_journal->j_task->pid;
+			bio->sub_eid = handle->h_transaction->t_journal->j_task->epoch_count;
+		}
+	}
+	else if(wbc->sync_mode == WB_BARRIER_ALL){
 
+		bio->main_eid = current->epoch_count;
+		if(handle->h_transaction->t_tid == EXT4_I(inode)->i_datasync_tid){
 
+			bio->sub_stream_id = handle->h_transaction->t_journal->j_task->pid;
+			bio->sub_eid = handle->h_transaction->t_journal->j_task->epoch_count;
+		}
+	}
+//	printk(KERN_ERR "main sid:%d\teid:%d\t sub sid:%d\teid:%d\n", bio->main_stream_id, bio->main_eid, bio->sub_stream_id,bio->sub_eid);
 	io_end->offset = (page->index << PAGE_CACHE_SHIFT) + bh_offset(bh);
 
 	io->io_bio = bio;
diff --git kernel/x86_64/fs/jbd2/revoke.c kernel/x86_64/fs/jbd2/revoke.c
index 0a078ae..16990f3 100755
--- kernel/x86_64/fs/jbd2/revoke.c
+++ kernel/x86_64/fs/jbd2/revoke.c
@@ -132,7 +132,7 @@ static void write_one_revoke_record64(journal_t *, transaction_t *,
 				struct list_head *,
 				struct buffer_head **, int*,
 				struct jbd2_revoke_record_s *, long long);
-static void flush_descriptor64(journal_t *, struct buffer_ehad *, int, long long);
+static void flush_descriptor64(journal_t *, struct buffer_head*, int, long long);
 #endif
 
 /* Utility functions to maintain the revoke table */
diff --git kernel/x86_64/include/linux/blk_types.h kernel/x86_64/include/linux/blk_types.h
index c72f3da..b2e0542 100755
--- kernel/x86_64/include/linux/blk_types.h
+++ kernel/x86_64/include/linux/blk_types.h
@@ -43,6 +43,10 @@ struct bio {
 	/*unsigned long		bi_rw;*/		/* bottom bits READ/WRITE,
 						 * top bits priority
 						 */
+	unsigned short		main_eid;
+	unsigned short		sub_eid;
+	short			main_stream_id;
+	short			sub_stream_id;
 
 	pid_t			bi_stream_id;	/* kms91 added 19.04.04 - stream id (PID)
 						 * This variable store process id (PID) as stream id
diff --git kernel/x86_64/include/linux/nvme.h kernel/x86_64/include/linux/nvme.h
index f95b775..8088db7 100755
--- kernel/x86_64/include/linux/nvme.h
+++ kernel/x86_64/include/linux/nvme.h
@@ -220,11 +220,12 @@ struct nvme_rw_command {
 	__u16			command_id;
 	__le32			nsid;
 	//__u64			rsvd2;		/* kms91 edit - __u32 for epoch_id, __s32 for stream_id */
-	__s32			cmd_stream_id;	/* kms91 added 19.04. 05 - stream id
-						 * It stores Process id (PID) as stream id
-						 * type is signed int (=pid_t)
-						 */
-	__u32			cmd_epoch_id;	/* kms91 added 19.03.18 - epoch id */
+	//__u32			cmd_epoch_id;	/* kms91 added 19.03.18 - epoch id */
+	__u16			eid_1;
+	__u16			eid_2;
+	__s16			sid_1;
+	__s16			sid_2;
+
 	__le64			metadata;
 	__le64			prp1;
 	__le64			prp2;
diff --git kernel/x86_64/include/linux/sched.h kernel/x86_64/include/linux/sched.h
index 6c75fcf..111cb81 100755
--- kernel/x86_64/include/linux/sched.h
+++ kernel/x86_64/include/linux/sched.h
@@ -1452,6 +1452,7 @@ struct task_struct {
         struct epoch *__epoch;
 	unsigned int barrier_fail;
 	unsigned int epoch_fail;
+	unsigned short epoch_count;
 	//struct list_head epoch_pending;
 	//struct list_head epoch_dispatch;
 	//struct list_head epoch_complte;
diff --git kernel/x86_64/kernel/fork.c kernel/x86_64/kernel/fork.c
index 6852035..7bb7caf 100755
--- kernel/x86_64/kernel/fork.c
+++ kernel/x86_64/kernel/fork.c
@@ -317,6 +317,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig)
 	tsk->epoch_fail = 0;
 
 	tsk->stack = ti;
+	tsk->epoch_count = 0;
 
 	setup_thread_stack(tsk, orig);
 	clear_user_return_notifier(tsk);
diff --git kernel/x86_64/mm/filemap.c kernel/x86_64/mm/filemap.c
index 20a1f34..bd7808a 100755
--- kernel/x86_64/mm/filemap.c
+++ kernel/x86_64/mm/filemap.c
@@ -459,7 +459,7 @@ int filemap_write_and_wait_range(struct address_space *mapping,
 
 	if (mapping->nrpages) {
 		err = __filemap_fdatawrite_range(mapping, lstart, lend,
-						 WB_SYNC_ALL);
+						 WB_BARRIER_ALL);
 		/* See comment of filemap_write_and_wait() */
 		if (err != -EIO) {
 			int err2 = filemap_fdatawait_range(mapping,
